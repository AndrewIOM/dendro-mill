{"version":3,"sources":["../../node_modules/fable-import-electron/Fable.Import.Electron.fs"],"names":[],"mappings":";;AAsBO;AAAA;AAAA;AACqD,CADrD;AAswCA;AAAA;AAAA;AAC0C,CAD1C","file":"Fable.Import.Electron.js","sourcesContent":["// Type definitions for Electron v0.37.7\n\nnamespace Fable.Import\nopen System\nopen Fable.Core\nopen Fable.Import.JS\nopen Fable.Import.Node\nopen Fable.Import.Browser\n\n// type Document =\n//     [<Emit(\"$0.createElement('webview')\")>] abstract createElement_webview: unit -> Electron.WebViewElement\n\n// and Window =\n//     abstract ``open``: url: string * ?frameName: string * ?features: string -> Electron.BrowserWindowProxy\n\n// and File =\n//     abstract path: string with get, set\n\nmodule ElectronPrivate =\n    type GlobalEvent =\n        Event\n\nmodule Electron =\n    type [<Import(\"EventEmitter\", \"electron\")>] EventEmitter() =\n        interface NodeJS.EventEmitter with\n            member __.addListener(``event``: string, listener: Function): NodeJS.EventEmitter = failwith \"JS only\"\n            member __.on(``event``: string, listener: Function): NodeJS.EventEmitter = failwith \"JS only\"\n            member __.once(``event``: string, listener: Function): NodeJS.EventEmitter = failwith \"JS only\"\n            member __.removeListener(``event``: string, listener: Function): NodeJS.EventEmitter = failwith \"JS only\"\n            member __.removeAllListeners(?``event``: string): NodeJS.EventEmitter = failwith \"JS only\"\n            member __.setMaxListeners(n: int): unit = failwith \"JS only\"\n            member __.getMaxListeners(): int = failwith \"JS only\"\n            member __.listeners(``event``: string): ResizeArray<Function> = failwith \"JS only\"\n            member __.listenerCount(``type``: string): int = failwith \"JS only\"\n            member __.emit(``event``: string, [<ParamArray>] args: obj[]): bool = failwith \"JS only\"\n\n    and Event =\n        abstract preventDefault: Function with get, set\n        abstract sender: EventEmitter with get, set\n\n    and App =\n        inherit NodeJS.EventEmitter\n        abstract commandLine: CommandLine with get, set\n        abstract dock: Dock with get, set\n        [<Emit(\"$0.on('will-finish-launching',$1...)\")>] abstract ``on_will-finish-launching``: listener: Function -> obj\n        [<Emit(\"$0.on('ready',$1...)\")>] abstract on_ready: listener: Function -> obj\n        [<Emit(\"$0.on('window-all-closed',$1...)\")>] abstract ``on_window-all-closed``: listener: Function -> obj\n        [<Emit(\"$0.on('before-quit',$1...)\")>] abstract ``on_before-quit``: listener: Func<Event, unit> -> obj\n        [<Emit(\"$0.on('will-quit',$1...)\")>] abstract ``on_will-quit``: listener: Func<Event, unit> -> obj\n        [<Emit(\"$0.on('quit',$1...)\")>] abstract on_quit: listener: Func<Event, float, unit> -> obj\n        [<Emit(\"$0.on('open-file',$1...)\")>] abstract ``on_open-file``: listener: Func<Event, string, unit> -> obj\n        [<Emit(\"$0.on('open-url',$1...)\")>] abstract ``on_open-url``: listener: Func<Event, string, unit> -> obj\n        [<Emit(\"$0.on('activate',$1...)\")>] abstract on_activate: listener: Function -> obj\n        [<Emit(\"$0.on('browser-window-blur',$1...)\")>] abstract ``on_browser-window-blur``: listener: Func<Event, BrowserWindow, unit> -> obj\n        [<Emit(\"$0.on('browser-window-focus',$1...)\")>] abstract ``on_browser-window-focus``: listener: Func<Event, BrowserWindow, unit> -> obj\n        [<Emit(\"$0.on('browser-window-created',$1...)\")>] abstract ``on_browser-window-created``: listener: Func<Event, BrowserWindow, unit> -> obj\n        [<Emit(\"$0.on('certificate-error',$1...)\")>] abstract ``on_certificate-error``: listener: Func<Event, WebContents, string, string, Certificate, Func<bool, unit>, unit> -> obj\n        [<Emit(\"$0.on('select-client-certificate',$1...)\")>] abstract ``on_select-client-certificate``: listener: Func<Event, WebContents, string, ResizeArray<Certificate>, Func<Certificate, unit>, unit> -> obj\n        [<Emit(\"$0.on('login',$1...)\")>] abstract on_login: listener: Func<Event, WebContents, LoginRequest, LoginAuthInfo, Func<string, string, unit>, unit> -> obj\n        [<Emit(\"$0.on('gpu-process-crashed',$1...)\")>] abstract ``on_gpu-process-crashed``: listener: Function -> obj\n        [<Emit(\"$0.on('platform-theme-changed',$1...)\")>] abstract ``on_platform-theme-changed``: listener: Function -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract quit: unit -> unit\n        abstract exit: exitCode: float -> unit\n        abstract focus: unit -> unit\n        abstract hide: unit -> unit\n        abstract show: unit -> unit\n        abstract getAppPath: unit -> string\n        abstract getPath: name: AppPathName -> string\n        abstract setPath: name: AppPathName * path: string -> unit\n        abstract getVersion: unit -> string\n        abstract getName: unit -> string\n        abstract setName: name: string -> unit\n        abstract getLocale: unit -> string\n        abstract addRecentDocument: path: string -> unit\n        abstract clearRecentDocuments: unit -> unit\n        abstract setAsDefaultProtocolClient: protocol: string -> unit\n        abstract removeAsDefaultProtocolClient: protocol: string -> unit\n        abstract setUserTasks: tasks: ResizeArray<Task> -> unit\n        abstract allowNTLMCredentialsForAllDomains: allow: bool -> unit\n        abstract makeSingleInstance: callback: Func<ResizeArray<string>, string, bool> -> bool\n        abstract setAppUserModelId: id: string -> unit\n        abstract isAeroGlassEnabled: unit -> bool\n        abstract isDarkMode: unit -> bool\n        abstract importCertificate: options: ImportCertificateOptions * callback: Func<float, unit> -> unit\n\n    and [<StringEnum>] AppPathName =\n        | Home | AppData | UserData | Temp | Exe | Module | Desktop | Documents | Downloads | Music | Pictures | Videos\n\n    and ImportCertificateOptions =\n        abstract certificate: string with get, set\n        abstract password: string with get, set\n\n    and CommandLine =\n        abstract appendSwitch: _switch: string * ?value: U2<string, float> -> unit\n        abstract appendArgument: value: string -> unit\n\n    and Dock =\n        abstract bounce: ?``type``: string -> float\n        abstract cancelBounce: id: float -> unit\n        abstract setBadge: text: string -> unit\n        abstract getBadge: unit -> string\n        abstract hide: unit -> unit\n        abstract show: unit -> unit\n        abstract setMenu: menu: Menu -> unit\n        abstract setIcon: icon: U2<NativeImage, string> -> unit\n\n    and Task =\n        abstract program: string with get, set\n        abstract arguments: string with get, set\n        abstract title: string with get, set\n        abstract description: string option with get, set\n        abstract iconPath: string with get, set\n        abstract iconIndex: float option with get, set\n\n    and AutoUpdater =\n        inherit NodeJS.EventEmitter\n        [<Emit(\"$0.on('error',$1...)\")>] abstract on_error: listener: Func<Error, unit> -> obj\n        [<Emit(\"$0.on('checking-for-update',$1...)\")>] abstract ``on_checking-for-update``: listener: Function -> obj\n        [<Emit(\"$0.on('update-available',$1...)\")>] abstract ``on_update-available``: listener: Function -> obj\n        [<Emit(\"$0.on('update-not-available',$1...)\")>] abstract ``on_update-not-available``: listener: Function -> obj\n        [<Emit(\"$0.on('update-downloaded',$1...)\")>] abstract ``on_update-downloaded``: listener: Func<Event, string, string, DateTime, string, unit> -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract setFeedURL: url: string -> unit\n        abstract checkForUpdates: unit -> unit\n        abstract quitAndInstall: unit -> unit\n\n    and BrowserWindowStatic =\n        [<Emit(\"new $0($1...)\")>] abstract Create: ?options: BrowserWindowOptions -> BrowserWindow\n        abstract getAllWindows: unit -> ResizeArray<BrowserWindow>\n        abstract getFocusedWindow: unit -> BrowserWindow\n        abstract fromWebContents: webContents: WebContents -> BrowserWindow\n        abstract fromId: id: float -> BrowserWindow\n        abstract addDevToolsExtension: path: string -> string\n        abstract removeDevToolsExtension: name: string -> unit\n\n    and BrowserWindow =\n        inherit NodeJS.EventEmitter\n        abstract webContents: WebContents with get, set\n        abstract id: float with get, set\n        [<Emit(\"$0.on('page-title-updated',$1...)\")>] abstract ``on_page-title-updated``: listener: Func<Event, unit> -> obj\n        [<Emit(\"$0.on('close',$1...)\")>] abstract on_close: listener: Func<Event, unit> -> obj\n        [<Emit(\"$0.on('closed',$1...)\")>] abstract on_closed: listener: Function -> obj\n        [<Emit(\"$0.on('unresponsive',$1...)\")>] abstract on_unresponsive: listener: Function -> obj\n        [<Emit(\"$0.on('responsive',$1...)\")>] abstract on_responsive: listener: Function -> obj\n        [<Emit(\"$0.on('blur',$1...)\")>] abstract on_blur: listener: Function -> obj\n        [<Emit(\"$0.on('focus',$1...)\")>] abstract on_focus: listener: Function -> obj\n        [<Emit(\"$0.on('show',$1...)\")>] abstract on_show: listener: Function -> obj\n        [<Emit(\"$0.on('hide',$1...)\")>] abstract on_hide: listener: Function -> obj\n        [<Emit(\"$0.on('maximize',$1...)\")>] abstract on_maximize: listener: Function -> obj\n        [<Emit(\"$0.on('unmaximize',$1...)\")>] abstract on_unmaximize: listener: Function -> obj\n        [<Emit(\"$0.on('minimize',$1...)\")>] abstract on_minimize: listener: Function -> obj\n        [<Emit(\"$0.on('restore',$1...)\")>] abstract on_restore: listener: Function -> obj\n        [<Emit(\"$0.on('resize',$1...)\")>] abstract on_resize: listener: Function -> obj\n        [<Emit(\"$0.on('move',$1...)\")>] abstract on_move: listener: Function -> obj\n        [<Emit(\"$0.on('enter-full-screen',$1...)\")>] abstract ``on_enter-full-screen``: listener: Function -> obj\n        [<Emit(\"$0.on('leave-full-screen',$1...)\")>] abstract ``on_leave-full-screen``: listener: Function -> obj\n        [<Emit(\"$0.on('enter-html-full-screen',$1...)\")>] abstract ``on_enter-html-full-screen``: listener: Function -> obj\n        [<Emit(\"$0.on('leave-html-full-screen',$1...)\")>] abstract ``on_leave-html-full-screen``: listener: Function -> obj\n        [<Emit(\"$0.on('app-command',$1...)\")>] abstract ``on_app-command``: listener: Func<Event, string, unit> -> obj\n        [<Emit(\"$0.on('scroll-touch-begin',$1...)\")>] abstract ``on_scroll-touch-begin``: listener: Function -> obj\n        [<Emit(\"$0.on('scroll-touch-end',$1...)\")>] abstract ``on_scroll-touch-end``: listener: Function -> obj\n        [<Emit(\"$0.on('swipe',$1...)\")>] abstract on_swipe: listener: Func<Event, SwipeDirection, unit> -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract destroy: unit -> unit\n        abstract close: unit -> unit\n        abstract focus: unit -> unit\n        abstract blur: unit -> unit\n        abstract isFocused: unit -> bool\n        abstract show: unit -> unit\n        abstract showInactive: unit -> unit\n        abstract hide: unit -> unit\n        abstract isVisible: unit -> bool\n        abstract maximize: unit -> unit\n        abstract unmaximize: unit -> unit\n        abstract isMaximized: unit -> bool\n        abstract minimize: unit -> unit\n        abstract restore: unit -> unit\n        abstract isMinimized: unit -> bool\n        abstract setFullScreen: flag: bool -> unit\n        abstract isFullScreen: unit -> bool\n        abstract setAspectRatio: aspectRatio: float * ?extraSize: Dimension -> unit\n        abstract setBounds: options: Rectangle * ?animate: bool -> unit\n        abstract getBounds: unit -> Rectangle\n        abstract setSize: width: float * height: float * ?animate: bool -> unit\n        abstract getSize: unit -> ResizeArray<float>\n        abstract setContentSize: width: float * height: float * ?animate: bool -> unit\n        abstract getContentSize: unit -> ResizeArray<float>\n        abstract setMinimumSize: width: float * height: float -> unit\n        abstract getMinimumSize: unit -> ResizeArray<float>\n        abstract setMaximumSize: width: float * height: float -> unit\n        abstract getMaximumSize: unit -> ResizeArray<float>\n        abstract setResizable: resizable: bool -> unit\n        abstract isResizable: unit -> bool\n        abstract setMovable: movable: bool -> unit\n        abstract isMovable: unit -> bool\n        abstract setMinimizable: minimizable: bool -> unit\n        abstract isMinimizable: unit -> bool\n        abstract setMaximizable: maximizable: bool -> unit\n        abstract isMaximizable: unit -> bool\n        abstract setFullScreenable: fullscreenable: bool -> unit\n        abstract isFullScreenable: unit -> bool\n        abstract setClosable: closable: bool -> unit\n        abstract isClosable: unit -> bool\n        abstract setAlwaysOnTop: flag: bool -> unit\n        abstract isAlwaysOnTop: unit -> bool\n        abstract center: unit -> unit\n        abstract setPosition: x: float * y: float * ?animate: bool -> unit\n        abstract getPosition: unit -> ResizeArray<float>\n        abstract setTitle: title: string -> unit\n        abstract getTitle: unit -> string\n        abstract setSheetOffset: offset: float -> unit\n        abstract flashFrame: flag: bool -> unit\n        abstract setSkipTaskbar: skip: bool -> unit\n        abstract setKiosk: flag: bool -> unit\n        abstract isKiosk: unit -> bool\n        abstract getNativeWindowHandle: unit -> Buffer\n        abstract hookWindowMessage: message: float * callback: Function -> unit\n        abstract isWindowMessageHooked: message: float -> bool\n        abstract unhookWindowMessage: message: float -> unit\n        abstract unhookAllWindowMessages: unit -> unit\n        abstract setRepresentedFilename: filename: string -> unit\n        abstract getRepresentedFilename: unit -> string\n        abstract setDocumentEdited: edited: bool -> unit\n        abstract isDocumentEdited: unit -> bool\n        abstract focusOnWebView: unit -> unit\n        abstract blurWebView: unit -> unit\n        abstract capturePage: rect: Rectangle * callback: Func<NativeImage, unit> -> unit\n        abstract capturePage: callback: Func<NativeImage, unit> -> unit\n        abstract print: ?options: PrintOptions -> unit\n        abstract printToPDF: options: PrintToPDFOptions * callback: Func<Error, Buffer, unit> -> unit\n        abstract loadURL: url: string * ?options: LoadURLOptions -> unit\n        abstract reload: unit -> unit\n        abstract setMenu: menu: Menu -> unit\n        abstract setProgressBar: progress: float -> unit\n        abstract setOverlayIcon: overlay: NativeImage * description: string -> unit\n        abstract setHasShadow: hasShadow: bool -> unit\n        abstract hasShadow: unit -> bool\n        abstract setThumbarButtons: buttons: ResizeArray<ThumbarButton> -> bool\n        abstract showDefinitionForSelection: unit -> unit\n        abstract setAutoHideMenuBar: hide: bool -> unit\n        abstract isMenuBarAutoHide: unit -> bool\n        abstract setMenuBarVisibility: visibile: bool -> unit\n        abstract isMenuBarVisible: unit -> bool\n        abstract setVisibleOnAllWorkspaces: visible: bool -> unit\n        abstract isVisibleOnAllWorkspaces: unit -> bool\n        abstract setIgnoreMouseEvents: ignore: bool -> unit        \n\n    and [<StringEnum>] SwipeDirection =\n        | Up | Right | Down | Left\n\n    and [<StringEnum>] ThumbarButtonFlags =\n        | Enabled | Disabled | Dismissonclick | Nobackground | Hidden | Noninteractive\n\n    and ThumbarButton =\n        abstract icon: U2<NativeImage, string> with get, set\n        abstract click: Function with get, set\n        abstract tooltip: string option with get, set\n        abstract flags: ResizeArray<ThumbarButtonFlags> option with get, set\n\n    and WebPreferences =\n        abstract nodeIntegration: bool option with get, set\n        abstract preload: string option with get, set\n        abstract session: Session option with get, set\n        abstract partition: string option with get, set\n        abstract zoomFactor: float option with get, set\n        abstract javascript: bool option with get, set\n        abstract webSecurity: bool option with get, set\n        abstract allowDisplayingInsecureContent: bool option with get, set\n        abstract allowRunningInsecureContent: bool option with get, set\n        abstract images: bool option with get, set\n        abstract textAreasAreResizable: bool option with get, set\n        abstract webgl: bool option with get, set\n        abstract webaudio: bool option with get, set\n        abstract plugins: bool option with get, set\n        abstract experimentalFeatures: bool option with get, set\n        abstract experimentalCanvasFeatures: bool option with get, set\n        abstract directWrite: bool option with get, set\n        abstract blinkFeatures: string option with get, set\n        abstract defaultFontFamily: obj option with get, set\n        abstract defaultFontSize: float option with get, set\n        abstract defaultMonospaceFontSize: float option with get, set\n        abstract minimumFontSize: float option with get, set\n        abstract defaultEncoding: string option with get, set\n        abstract backgroundThrottling: bool option with get, set\n\n    and BrowserWindowOptions =\n        inherit Rectangle\n        abstract width: float option with get, set\n        abstract height: float option with get, set\n        abstract x: float option with get, set\n        abstract y: float option with get, set\n        abstract useContentSize: bool option with get, set\n        abstract center: bool option with get, set\n        abstract minWidth: float option with get, set\n        abstract minHeight: float option with get, set\n        abstract maxWidth: float option with get, set\n        abstract maxHeight: float option with get, set\n        abstract resizable: bool option with get, set\n        abstract movable: bool option with get, set\n        abstract minimizable: bool option with get, set\n        abstract maximizable: bool option with get, set\n        abstract closable: bool option with get, set\n        abstract alwaysOnTop: bool option with get, set\n        abstract fullscreen: bool option with get, set\n        abstract fullscreenable: bool option with get, set\n        abstract skipTaskbar: bool option with get, set\n        abstract kiosk: bool option with get, set\n        abstract title: string option with get, set\n        abstract icon: U2<NativeImage, string> option with get, set\n        abstract show: bool option with get, set\n        abstract frame: bool option with get, set\n        abstract acceptFirstMouse: bool option with get, set\n        abstract disableAutoHideCursor: bool option with get, set\n        abstract autoHideMenuBar: bool option with get, set\n        abstract enableLargerThanScreen: bool option with get, set\n        abstract backgroundColor: string option with get, set\n        abstract hasShadow: bool option with get, set\n        abstract darkTheme: bool option with get, set\n        abstract transparent: bool option with get, set\n        abstract ``type``: BrowserWindowType option with get, set\n        abstract titleBarStyle: string option with get, set\n        abstract webPreferences: WebPreferences option with get, set\n\n    and BrowserWindowType =\n        U2<BrowserWindowTypeLinux, BrowserWindowTypeMac>\n\n    and [<StringEnum>] BrowserWindowTypeLinux =\n        | Desktop | Dock | Toolbar | Splash | Notification\n\n    and [<StringEnum>] BrowserWindowTypeMac =\n        | Desktop | Textured\n\n    and Rectangle =\n        abstract x: float option with get, set\n        abstract y: float option with get, set\n        abstract width: float option with get, set\n        abstract height: float option with get, set\n\n    and Clipboard =\n        abstract readText: ?``type``: ClipboardType -> string\n        abstract writeText: text: string * ?``type``: ClipboardType -> unit\n        abstract readHtml: ?``type``: ClipboardType -> string\n        abstract writeHtml: markup: string * ?``type``: ClipboardType -> unit\n        abstract readImage: ?``type``: ClipboardType -> NativeImage\n        abstract writeImage: image: NativeImage * ?``type``: ClipboardType -> unit\n        abstract readRtf: ?``type``: ClipboardType -> string\n        abstract writeRtf: text: string * ?``type``: ClipboardType -> unit\n        abstract clear: ?``type``: ClipboardType -> unit\n        abstract availableFormats: ?``type``: ClipboardType -> ResizeArray<string>\n        abstract has: format: string * ?``type``: ClipboardType -> bool\n        abstract read: format: string * ?``type``: ClipboardType -> U2<string, NativeImage>\n        abstract write: data: obj * ?``type``: ClipboardType -> unit\n\n    and [<StringEnum>] ClipboardType =\n        | [<CompiledName(\"\")>] None | Selection\n\n    and ContentTracing =\n        abstract getCategories: callback: Func<ResizeArray<string>, unit> -> unit\n        abstract startRecording: options: ContentTracingOptions * callback: Function -> unit\n        abstract stopRecording: resultFilePath: string * callback: Func<string, unit> -> unit\n        abstract startMonitoring: options: ContentTracingOptions * callback: Function -> unit\n        abstract stopMonitoring: callback: Function -> unit\n        abstract captureMonitoringSnapshot: resultFilePath: string * callback: Func<string, unit> -> unit\n        abstract getTraceBufferUsage: callback: Function -> unit\n        abstract setWatchEvent: categoryName: string * eventName: string * callback: Function -> unit\n        abstract cancelWatchEvent: unit -> unit\n\n    and ContentTracingOptions =\n        abstract categoryFilter: string with get, set\n        abstract traceOptions: string with get, set\n\n    and CrashReporter =\n        abstract start: options: CrashReporterStartOptions -> unit\n        abstract getLastCrashReport: unit -> CrashReport\n        abstract getUploadedReports: unit -> ResizeArray<CrashReport>\n\n    and CrashReporterStartOptions =\n        abstract productName: string option with get, set\n        abstract companyName: string with get, set\n        abstract submitURL: string with get, set\n        abstract autoSubmit: bool option with get, set\n        abstract ignoreSystemCrashHandler: bool option with get, set\n        abstract extra: obj option with get, set\n\n    and CrashReport =\n        abstract id: string with get, set\n        abstract date: DateTime with get, set\n\n    and DesktopCapturer =\n        abstract getSources: options: DesktopCapturerOptions * callback: Func<Error, ResizeArray<DesktopCapturerSource>, obj> -> unit\n\n    and DesktopCapturerOptions =\n        abstract types: ResizeArray<(* TODO: StringEnum *) string> option with get, set\n        abstract thumbnailSize: Dimension option with get, set\n\n    and DesktopCapturerSource =\n        abstract id: string with get, set\n        abstract name: string with get, set\n        abstract thumbnail: NativeImage with get, set\n\n    and Dialog =\n        abstract showOpenDialog: browserWindow: BrowserWindow * options: OpenDialogOptions * ?callback: Func<ResizeArray<string>, unit> -> ResizeArray<string>\n        abstract showOpenDialog: options: OpenDialogOptions * ?callback: Func<ResizeArray<string>, unit> -> ResizeArray<string>\n        abstract showSaveDialog: browserWindow: BrowserWindow * options: SaveDialogOptions * ?callback: Func<string, unit> -> string\n        abstract showSaveDialog: options: SaveDialogOptions * ?callback: Func<string, unit> -> string\n        abstract showMessageBox: browserWindow: BrowserWindow * options: ShowMessageBoxOptions * ?callback: Func<float, unit> -> float\n        abstract showMessageBox: options: ShowMessageBoxOptions * ?callback: Func<float, unit> -> float\n        abstract showErrorBox: title: string * content: string -> unit\n\n    and OpenDialogOptions =\n        abstract title: string option with get, set\n        abstract defaultPath: string option with get, set\n        abstract filters: ResizeArray<obj> option with get, set\n        abstract properties: ResizeArray<(* TODO: StringEnum *) string> option with get, set\n\n    and SaveDialogOptions =\n        abstract title: string option with get, set\n        abstract defaultPath: string option with get, set\n        abstract filters: ResizeArray<obj> option with get, set\n\n    and ShowMessageBoxOptions =\n        abstract ``type``: string option with get, set\n        abstract buttons: ResizeArray<string> option with get, set\n        abstract defaultId: float option with get, set\n        abstract title: string option with get, set\n        abstract message: string option with get, set\n        abstract detail: string option with get, set\n        abstract icon: NativeImage option with get, set\n        abstract cancelId: float option with get, set\n        abstract noLink: bool option with get, set\n\n    and DownloadItem =\n        inherit NodeJS.EventEmitter\n        [<Emit(\"$0.on('updated',$1...)\")>] abstract on_updated: listener: Function -> obj\n        [<Emit(\"$0.on('done',$1...)\")>] abstract on_done: listener: Func<Event, (* TODO: StringEnum *) string, unit> -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract setSavePath: path: string -> unit\n        abstract pause: unit -> unit\n        abstract resume: unit -> unit\n        abstract cancel: unit -> unit\n        abstract getURL: unit -> string\n        abstract getMimeType: unit -> string\n        abstract hasUserGesture: unit -> bool\n        abstract getFilename: unit -> string\n        abstract getTotalBytes: unit -> float\n        abstract getReceivedBytes: unit -> float\n        abstract getContentDisposition: unit -> string\n\n    and GlobalShortcut =\n        abstract register: accelerator: string * callback: Function -> unit\n        abstract isRegistered: accelerator: string -> bool\n        abstract unregister: accelerator: string -> unit\n        abstract unregisterAll: unit -> unit\n\n    and IpcMain =\n        inherit NodeJS.EventEmitter\n        abstract addListener: channel: string * listener: IpcMainEventListener -> obj\n        abstract on: channel: string * listener: IpcMainEventListener -> obj\n        abstract once: channel: string * listener: IpcMainEventListener -> obj\n        abstract removeListener: channel: string * listener: IpcMainEventListener -> obj\n        abstract removeAllListeners: ?channel: string -> obj\n\n    and IpcMainEventListener =\n        Func<IpcMainEvent, obj, unit>\n\n    and IpcMainEvent =\n        abstract returnValue: obj option with get, set\n        abstract sender: WebContents with get, set\n\n    and IpcRenderer =\n        inherit NodeJS.EventEmitter\n        abstract addListener: channel: string * listener: IpcRendererEventListener -> obj\n        abstract on: channel: string * listener: IpcRendererEventListener -> obj\n        abstract once: channel: string * listener: IpcRendererEventListener -> obj\n        abstract removeListener: channel: string * listener: IpcRendererEventListener -> obj\n        abstract removeAllListeners: ?channel: string -> obj\n        abstract send: channel: string * [<ParamArray>] args: obj[] -> unit\n        abstract sendSync: channel: string * [<ParamArray>] args: obj[] -> obj\n        abstract sendToHost: channel: string * [<ParamArray>] args: obj[] -> unit\n\n    and IpcRendererEventListener =\n        Func<IpcRendererEvent, obj, unit>\n\n    and IpcRendererEvent =\n        abstract sender: IpcRenderer with get, set\n\n    and MenuItemStatic =\n        [<Emit(\"new $0($1...)\")>] abstract Create: options: MenuItemOptions -> MenuItem\n\n    and MenuItem =\n        abstract click: Func<MenuItem, BrowserWindow, unit> with get, set\n        abstract ``type``: MenuItemType with get, set\n        abstract role: U2<MenuItemRole, MenuItemRoleMac> with get, set\n        abstract accelerator: string with get, set\n        abstract icon: U2<NativeImage, string> with get, set\n        abstract submenu: U2<Menu, ResizeArray<MenuItemOptions>> with get, set\n        abstract label: string with get, set\n        abstract sublabel: string with get, set\n        abstract enabled: bool with get, set\n        abstract visible: bool with get, set\n        abstract ``checked``: bool with get, set\n\n    and [<StringEnum>] MenuItemType =\n        | Normal | Separator | Submenu | Checkbox | Radio\n\n    and [<StringEnum>] MenuItemRole =\n        | Undo | Redo | Cut | Copy | Paste | Selectall | Minimize | Close\n\n    and [<StringEnum>] MenuItemRoleMac =\n        | About | Hide | Hideothers | Unhide | Front | Window | Help | Services\n\n    and MenuItemOptions =\n        abstract click: Func<MenuItem, BrowserWindow, unit> option with get, set\n        abstract ``type``: MenuItemType option with get, set\n        abstract label: string option with get, set\n        abstract sublabel: string option with get, set\n        abstract accelerator: string option with get, set\n        abstract icon: U2<NativeImage, string> option with get, set\n        abstract enabled: bool option with get, set\n        abstract visible: bool option with get, set\n        abstract ``checked``: bool option with get, set\n        abstract submenu: U2<Menu, ResizeArray<MenuItemOptions>> option with get, set\n        abstract id: string option with get, set\n        abstract position: string option with get, set\n        abstract role: U2<MenuItemRole, MenuItemRoleMac> option with get, set\n\n    and MenuStatic =\n        [<Emit(\"new $0($1...)\")>] abstract Create: unit -> Menu\n        abstract setApplicationMenu: menu: Menu -> unit\n        abstract sendActionToFirstResponder: action: string -> unit\n        abstract buildFromTemplate: template: ResizeArray<MenuItemOptions> -> Menu\n\n    and Menu =\n        inherit NodeJS.EventEmitter\n        abstract items: ResizeArray<MenuItem> with get, set\n        abstract popup: ?browserWindow: BrowserWindow * ?x: float * ?y: float -> unit\n        abstract append: menuItem: MenuItem -> unit\n        abstract insert: position: float * menuItem: MenuItem -> unit\n        \n    and NativeImageStatic =\n        abstract createEmpty: unit -> NativeImage\n        abstract createFromPath: path: string -> NativeImage\n        abstract createFromBuffer: buffer: Buffer * ?scaleFactor: float -> NativeImage\n        abstract createFromDataURL: dataURL: string -> NativeImage\n\n    and NativeImage =\n        abstract toPng: unit -> Buffer\n        abstract toJpeg: quality: float -> Buffer\n        abstract toDataURL: unit -> string\n        abstract getNativeHandle: unit -> Buffer\n        abstract isEmpty: unit -> bool\n        abstract getSize: unit -> Dimension\n        abstract setTemplateImage: option: bool -> unit\n        abstract isTemplateImage: unit -> bool\n\n    and PowerMonitor =\n        inherit NodeJS.EventEmitter\n        [<Emit(\"$0.on('suspend',$1...)\")>] abstract on_suspend: listener: Function -> obj\n        [<Emit(\"$0.on('resume',$1...)\")>] abstract on_resume: listener: Function -> obj\n        [<Emit(\"$0.on('on-ac',$1...)\")>] abstract ``on_on-ac``: listener: Function -> obj\n        [<Emit(\"$0.on('on-battery',$1...)\")>] abstract ``on_on-battery``: listener: Function -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n\n    and PowerSaveBlocker =\n        abstract start: ``type``: (* TODO: StringEnum *) string -> float\n        abstract stop: id: float -> unit\n        abstract isStarted: id: float -> bool\n\n    and Protocol =\n        abstract registerStandardSchemes: schemes: ResizeArray<string> -> unit\n        abstract registerServiceWorkerSchemes: schemes: ResizeArray<string> -> unit\n        abstract registerFileProtocol: scheme: string * handler: Func<ProtocolRequest, FileProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract registerBufferProtocol: scheme: string * handler: Func<ProtocolRequest, BufferProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract registerStringProtocol: scheme: string * handler: Func<ProtocolRequest, StringProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract registerHttpProtocol: scheme: string * handler: Func<ProtocolRequest, HttpProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract unregisterProtocol: scheme: string * ?completion: Func<Error, unit> -> unit\n        abstract isProtocolHandled: scheme: string * callback: Func<bool, unit> -> unit\n        abstract interceptFileProtocol: scheme: string * handler: Func<ProtocolRequest, FileProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract interceptStringProtocol: scheme: string * handler: Func<ProtocolRequest, BufferProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract interceptBufferProtocol: scheme: string * handler: Func<ProtocolRequest, StringProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract interceptHttpProtocol: scheme: string * handler: Func<ProtocolRequest, HttpProtocolCallback, unit> * ?completion: Func<Error, unit> -> unit\n        abstract uninterceptProtocol: scheme: string * ?completion: Func<Error, unit> -> unit\n\n    and ProtocolRequest =\n        abstract url: string with get, set\n        abstract referrer: string with get, set\n        abstract ``method``: string with get, set\n        abstract uploadData: ResizeArray<obj> option with get, set\n\n    and ProtocolCallback =\n        [<Emit(\"$0($1...)\")>] abstract Invoke: error: float -> unit\n        [<Emit(\"$0($1...)\")>] abstract Invoke: obj: obj -> unit\n        [<Emit(\"$0($1...)\")>] abstract Invoke: unit -> unit\n\n    and FileProtocolCallback =\n        inherit ProtocolCallback\n        [<Emit(\"$0($1...)\")>] abstract Invoke: filePath: string -> unit\n        [<Emit(\"$0($1...)\")>] abstract Invoke: obj: obj -> unit\n\n    and BufferProtocolCallback =\n        inherit ProtocolCallback\n        [<Emit(\"$0($1...)\")>] abstract Invoke: buffer: Buffer -> unit\n        [<Emit(\"$0($1...)\")>] abstract Invoke: obj: obj -> unit\n\n    and StringProtocolCallback =\n        inherit ProtocolCallback\n        [<Emit(\"$0($1...)\")>] abstract Invoke: str: string -> unit\n        [<Emit(\"$0($1...)\")>] abstract Invoke: obj: obj -> unit\n\n    and HttpProtocolCallback =\n        inherit ProtocolCallback\n        [<Emit(\"$0($1...)\")>] abstract Invoke: redirectRequest: obj -> unit\n\n    and Remote =\n        inherit CommonElectron\n        abstract ``process``: NodeJS.Process with get, set\n        abstract require: ``module``: string -> obj\n        abstract getCurrentWindow: unit -> BrowserWindow\n        abstract getCurrentWebContents: unit -> WebContents\n        abstract getGlobal: name: string -> obj\n\n    and Display =\n        abstract id: float with get, set\n        abstract bounds: Bounds with get, set\n        abstract workArea: Bounds with get, set\n        abstract size: Dimension with get, set\n        abstract workAreaSize: Dimension with get, set\n        abstract scaleFactor: float with get, set\n        abstract rotation: float with get, set\n        abstract touchSupport: (* TODO: StringEnum *) string with get, set\n\n    and Bounds =\n        abstract x: float with get, set\n        abstract y: float with get, set\n        abstract width: float with get, set\n        abstract height: float with get, set\n\n    and Dimension =\n        abstract width: float with get, set\n        abstract height: float with get, set\n\n    and Point =\n        abstract x: float with get, set\n        abstract y: float with get, set\n\n    and [<StringEnum>] DisplayMetrics =\n        | Bounds | WorkArea | ScaleFactor | Rotation\n\n    and Screen =\n        inherit NodeJS.EventEmitter\n        [<Emit(\"$0.on('display-added',$1...)\")>] abstract ``on_display-added``: listener: Func<Event, Display, unit> -> obj\n        [<Emit(\"$0.on('display-removed',$1...)\")>] abstract ``on_display-removed``: listener: Func<Event, Display, unit> -> obj\n        [<Emit(\"$0.on('display-metrics-changed',$1...)\")>] abstract ``on_display-metrics-changed``: listener: Func<Event, Display, ResizeArray<DisplayMetrics>, unit> -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract getCursorScreenPoint: unit -> Point\n        abstract getPrimaryDisplay: unit -> Display\n        abstract getAllDisplays: unit -> ResizeArray<Display>\n        abstract getDisplayNearestPoint: point: Point -> Display\n        abstract getDisplayMatching: rect: Bounds -> Display\n\n    and SessionStatic =\n        abstract defaultSession: Session with get, set\n        abstract fromPartition: partition: string -> Session\n\n    and Session =\n        inherit NodeJS.EventEmitter\n        abstract cookies: SessionCookies with get, set\n        /// TODO: Cast this to electron.WebRequest\n        abstract webRequest: obj with get, set\n        [<Emit(\"$0.on('will-download',$1...)\")>] abstract ``on_will-download``: listener: Func<Event, DownloadItem, WebContents, unit> -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract getCacheSize: callback: Func<float, unit> -> unit\n        abstract clearCache: callback: Function -> unit\n        abstract clearStorageData: callback: Function -> unit\n        abstract clearStorageData: options: ClearStorageDataOptions * callback: Function -> unit\n        abstract flushStorageData: unit -> unit\n        abstract setProxy: config: string * callback: Function -> unit\n        abstract resolveProxy: url: URL * callback: Func<string, unit> -> unit\n        abstract setDownloadPath: path: string -> unit\n        abstract enableNetworkEmulation: options: NetworkEmulationOptions -> unit\n        abstract disableNetworkEmulation: unit -> unit\n        abstract setCertificateVerifyProc: proc: Func<string, Certificate, Func<bool, unit>, unit> -> unit\n        abstract setPermissionRequestHandler: handler: Func<WebContents, Permission, Func<bool, unit>, unit> -> unit\n        abstract clearHostResolverCache: callback: Function -> unit        \n\n    and [<StringEnum>] Permission =\n        | Media | Geolocation | Notifications | MidiSysex | PointerLock | Fullscreen | OpenExternal\n\n    and ClearStorageDataOptions =\n        abstract origin: string option with get, set\n        abstract storages: ResizeArray<string> option with get, set\n        abstract quotas: ResizeArray<string> option with get, set\n\n    and NetworkEmulationOptions =\n        abstract offline: bool option with get, set\n        abstract latency: float option with get, set\n        abstract downloadThroughput: float option with get, set\n        abstract uploadThroughput: float option with get, set\n\n    and CookieFilter =\n        abstract url: string option with get, set\n        abstract name: string option with get, set\n        abstract domain: string option with get, set\n        abstract path: string option with get, set\n        abstract secure: bool option with get, set\n        abstract session: bool option with get, set\n\n    and Cookie =\n        abstract name: string with get, set\n        abstract value: string with get, set\n        abstract domain: string with get, set\n        abstract hostOnly: string with get, set\n        abstract path: string with get, set\n        abstract secure: bool with get, set\n        abstract httpOnly: bool with get, set\n        abstract session: bool with get, set\n        abstract expirationDate: float option with get, set\n\n    and CookieDetails =\n        abstract url: string with get, set\n        abstract name: string option with get, set\n        abstract value: string option with get, set\n        abstract domain: string option with get, set\n        abstract path: string option with get, set\n        abstract secure: bool option with get, set\n        abstract httpOnly: bool option with get, set\n        abstract expirationDate: float option with get, set\n\n    and SessionCookies =\n        abstract get: filter: CookieFilter * callback: Func<Error, ResizeArray<Cookie>, unit> -> unit\n        abstract set: details: CookieDetails * callback: Func<Error, unit> -> unit\n        abstract remove: url: string * name: string * callback: Func<Error, unit> -> unit\n\n    and Shell =\n        abstract showItemInFolder: fullPath: string -> unit\n        abstract openItem: fullPath: string -> unit\n        abstract openExternal: url: string * ?options: obj -> bool\n        abstract moveItemToTrash: fullPath: string -> bool\n        abstract beep: unit -> unit\n\n    and Tray =\n        inherit NodeJS.EventEmitter\n        [<Emit(\"$0.on('click',$1...)\")>] abstract on_click: listener: Func<Modifiers, Bounds, unit> -> obj\n        [<Emit(\"$0.on('right-click',$1...)\")>] abstract ``on_right-click``: listener: Func<Modifiers, Bounds, unit> -> obj\n        [<Emit(\"$0.on('double-click',$1...)\")>] abstract ``on_double-click``: listener: Func<Modifiers, Bounds, unit> -> obj\n        [<Emit(\"$0.on('balloon-show',$1...)\")>] abstract ``on_balloon-show``: listener: Function -> obj\n        [<Emit(\"$0.on('balloon-click',$1...)\")>] abstract ``on_balloon-click``: listener: Function -> obj\n        [<Emit(\"$0.on('balloon-closed',$1...)\")>] abstract ``on_balloon-closed``: listener: Function -> obj\n        [<Emit(\"$0.on('drop',$1...)\")>] abstract on_drop: listener: Function -> obj\n        [<Emit(\"$0.on('drop-files',$1...)\")>] abstract ``on_drop-files``: listener: Func<Event, ResizeArray<string>, unit> -> obj\n        [<Emit(\"$0.on('drag-enter',$1...)\")>] abstract ``on_drag-enter``: listener: Function -> obj\n        [<Emit(\"$0.on('drag-leave',$1...)\")>] abstract ``on_drag-leave``: listener: Function -> obj\n        [<Emit(\"$0.on('drag-end',$1...)\")>] abstract ``on_drag-end``: listener: Function -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        [<Emit(\"new $0($1...)\")>] abstract Create: image: U2<NativeImage, string> -> Tray\n        abstract destroy: unit -> unit\n        abstract setImage: image: U2<NativeImage, string> -> unit\n        abstract setPressedImage: image: NativeImage -> unit\n        abstract setToolTip: toolTip: string -> unit\n        abstract setTitle: title: string -> unit\n        abstract setHighlightMode: highlight: bool -> unit\n        abstract displayBalloon: ?options: obj -> unit\n        abstract popUpContextMenu: ?menu: Menu * ?position: Point -> unit\n        abstract setContextMenu: menu: Menu -> unit\n\n    and Modifiers =\n        abstract altKey: bool with get, set\n        abstract shiftKey: bool with get, set\n        abstract ctrlKey: bool with get, set\n        abstract metaKey: bool with get, set\n\n    and WebContents =\n        inherit NodeJS.EventEmitter\n        abstract session: Session with get, set\n        abstract hostWebContents: WebContents with get, set\n        abstract devToolsWebContents: WebContents with get, set\n        abstract debugger: Debugger with get, set\n        [<Emit(\"$0.on('did-finish-load',$1...)\")>] abstract ``on_did-finish-load``: listener: Function -> obj\n        [<Emit(\"$0.on('did-fail-load',$1...)\")>] abstract ``on_did-fail-load``: listener: Func<Event, float, string, string, bool, unit> -> obj\n        [<Emit(\"$0.on('did-frame-finish-load',$1...)\")>] abstract ``on_did-frame-finish-load``: listener: Func<Event, bool, unit> -> obj\n        [<Emit(\"$0.on('did-start-loading',$1...)\")>] abstract ``on_did-start-loading``: listener: Function -> obj\n        [<Emit(\"$0.on('did-stop-loading',$1...)\")>] abstract ``on_did-stop-loading``: listener: Function -> obj\n        [<Emit(\"$0.on('did-get-response-details',$1...)\")>] abstract ``on_did-get-response-details``: listener: Func<Event, bool, string, string, float, string, string, Headers, string, unit> -> obj\n        [<Emit(\"$0.on('did-get-redirect-request',$1...)\")>] abstract ``on_did-get-redirect-request``: listener: Func<Event, string, string, bool, float, string, string, Headers, unit> -> obj\n        [<Emit(\"$0.on('dom-ready',$1...)\")>] abstract ``on_dom-ready``: listener: Func<Event, unit> -> obj\n        [<Emit(\"$0.on('page-favicon-updated',$1...)\")>] abstract ``on_page-favicon-updated``: listener: Func<Event, ResizeArray<string>, unit> -> obj\n        [<Emit(\"$0.on('new-window',$1...)\")>] abstract ``on_new-window``: listener: Func<Event, string, string, NewWindowDisposition, BrowserWindowOptions, unit> -> obj\n        [<Emit(\"$0.on('will-navigate',$1...)\")>] abstract ``on_will-navigate``: listener: Func<Event, string, unit> -> obj\n        [<Emit(\"$0.on('did-navigate',$1...)\")>] abstract ``on_did-navigate``: listener: Func<Event, string, unit> -> obj\n        [<Emit(\"$0.on('did-navigate-in-page',$1...)\")>] abstract ``on_did-navigate-in-page``: listener: Func<Event, string, unit> -> obj\n        [<Emit(\"$0.on('crashed',$1...)\")>] abstract on_crashed: listener: Function -> obj\n        [<Emit(\"$0.on('plugin-crashed',$1...)\")>] abstract ``on_plugin-crashed``: listener: Func<Event, string, string, unit> -> obj\n        [<Emit(\"$0.on('destroyed',$1...)\")>] abstract on_destroyed: listener: Function -> obj\n        [<Emit(\"$0.on('devtools-opened',$1...)\")>] abstract ``on_devtools-opened``: listener: Function -> obj\n        [<Emit(\"$0.on('devtools-closed',$1...)\")>] abstract ``on_devtools-closed``: listener: Function -> obj\n        [<Emit(\"$0.on('devtools-focused',$1...)\")>] abstract ``on_devtools-focused``: listener: Function -> obj\n        [<Emit(\"$0.on('certificate-error',$1...)\")>] abstract ``on_certificate-error``: listener: Func<Event, string, string, Certificate, Func<bool, unit>, unit> -> obj\n        [<Emit(\"$0.on('select-client-certificate',$1...)\")>] abstract ``on_select-client-certificate``: listener: Func<Event, string, ResizeArray<Certificate>, Func<Certificate, unit>, unit> -> obj\n        [<Emit(\"$0.on('login',$1...)\")>] abstract on_login: listener: Func<Event, LoginRequest, LoginAuthInfo, Func<string, string, unit>, unit> -> obj\n        [<Emit(\"$0.on('found-in-page',$1...)\")>] abstract ``on_found-in-page``: listener: Func<Event, FoundInPageResult, unit> -> obj\n        [<Emit(\"$0.on('media-started-playing',$1...)\")>] abstract ``on_media-started-playing``: listener: Function -> obj\n        [<Emit(\"$0.on('media-paused',$1...)\")>] abstract ``on_media-paused``: listener: Function -> obj\n        [<Emit(\"$0.on('did-change-theme-color',$1...)\")>] abstract ``on_did-change-theme-color``: listener: Function -> obj\n        [<Emit(\"$0.on('cursor-changed',$1...)\")>] abstract ``on_cursor-changed``: listener: Func<Event, CursorType, NativeImage, float, unit> -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract loadURL: url: string * ?options: LoadURLOptions -> unit\n        abstract downloadURL: url: string -> unit\n        abstract getURL: unit -> string\n        abstract getTitle: unit -> string\n        abstract getFavicon: unit -> NativeImage\n        abstract isLoading: unit -> bool\n        abstract isLoadingMainFrame: unit -> bool\n        abstract isWaitingForResponse: unit -> bool\n        abstract stop: unit -> unit\n        abstract reload: unit -> unit\n        abstract reloadIgnoringCache: unit -> unit\n        abstract canGoBack: unit -> bool\n        abstract canGoForward: unit -> bool\n        abstract canGoToOffset: offset: float -> bool\n        abstract clearHistory: unit -> unit\n        abstract goBack: unit -> unit\n        abstract goForward: unit -> unit\n        abstract goToIndex: index: float -> unit\n        abstract goToOffset: offset: float -> unit\n        abstract isCrashed: unit -> bool\n        abstract setUserAgent: userAgent: string -> unit\n        abstract getUserAgent: unit -> string\n        abstract insertCSS: css: string -> unit\n        abstract executeJavaScript: code: string * ?userGesture: bool * ?callback: Func<obj, unit> -> unit\n        abstract setAudioMuted: muted: bool -> unit\n        abstract isAudioMuted: unit -> bool\n        abstract undo: unit -> unit\n        abstract redo: unit -> unit\n        abstract cut: unit -> unit\n        abstract copy: unit -> unit\n        abstract paste: unit -> unit\n        abstract pasteAndMatchStyle: unit -> unit\n        abstract delete: unit -> unit\n        abstract selectAll: unit -> unit\n        abstract unselect: unit -> unit\n        abstract replace: text: string -> unit\n        abstract replaceMisspelling: text: string -> unit\n        abstract insertText: text: string -> unit\n        abstract findInPage: text: string * ?options: FindInPageOptions -> float\n        abstract stopFindInPage: action: StopFindInPageAtion -> unit\n        abstract hasServiceWorker: callback: Func<bool, unit> -> unit\n        abstract unregisterServiceWorker: callback: Func<bool, unit> -> unit\n        abstract print: ?options: PrintOptions -> unit\n        abstract printToPDF: options: PrintToPDFOptions * callback: Func<Error, Buffer, unit> -> unit\n        abstract addWorkSpace: path: string -> unit\n        abstract removeWorkSpace: path: string -> unit\n        abstract openDevTools: ?options: obj -> unit\n        abstract closeDevTools: unit -> unit\n        abstract isDevToolsOpened: unit -> bool\n        abstract isDevToolsFocused: unit -> bool\n        abstract toggleDevTools: unit -> unit\n        abstract inspectElement: x: float * y: float -> unit\n        abstract inspectServiceWorker: unit -> unit\n        abstract send: channel: string * [<ParamArray>] args: obj[] -> unit\n        abstract enableDeviceEmulation: parameters: DeviceEmulationParameters -> unit\n        abstract disableDeviceEmulation: unit -> unit\n        abstract sendInputEvent: ``event``: SendInputEvent -> unit\n        abstract beginFrameSubscription: callback: Func<Buffer, unit> -> unit\n        abstract endFrameSubscription: unit -> unit\n        abstract savePage: fullPath: string * saveType: (* TODO: StringEnum *) string * ?callback: Func<Error, unit> -> bool\n\n    and Headers =\n        [<Emit(\"$0[$1]{{=$2}}\")>] abstract Item: key: string -> string with get, set\n\n    and [<StringEnum>] NewWindowDisposition =\n        | Default | ``Foreground-tab`` | ``Background-tab`` | ``New-window`` | Other\n\n    and [<StringEnum>] StopFindInPageAtion =\n        | ClearSelection | KeepSelection | ActivateSelection\n\n    and [<StringEnum>] CursorType =\n        | Default | Crosshair | Pointer | Text | Wait | Help | ``E-resize`` | ``N-resize`` | ``Ne-resize`` | ``Nw-resize`` | ``S-resize`` | ``Se-resize`` | ``Sw-resize`` | ``W-resize`` | ``Ns-resize`` | ``Ew-resize`` | ``Nesw-resize`` | ``Nwse-resize`` | ``Col-resize`` | ``Row-resize`` | ``M-panning`` | ``E-panning`` | ``N-panning`` | ``Ne-panning`` | ``Nw-panning`` | ``S-panning`` | ``Se-panning`` | ``Sw-panning`` | ``W-panning`` | Move | ``Vertical-text`` | Cell | ``Context-menu`` | Alias | Progress | Nodrop | Copy | None | ``Not-allowed`` | ``Zoom-in`` | ``Zoom-out`` | Grab | Grabbing | Custom\n\n    and LoadURLOptions =\n        abstract httpReferrer: string option with get, set\n        abstract userAgent: string option with get, set\n        abstract extraHeaders: string option with get, set\n\n    and PrintOptions =\n        abstract silent: bool option with get, set\n        abstract printBackground: bool option with get, set\n\n    and PrintToPDFOptions =\n        abstract marginsType: float option with get, set\n        abstract pageSize: string option with get, set\n        abstract printBackground: bool option with get, set\n        abstract printSelectionOnly: bool option with get, set\n        abstract landscape: bool option with get, set\n\n    and Certificate =\n        abstract data: Buffer with get, set\n        abstract issuerName: string with get, set\n\n    and LoginRequest =\n        abstract ``method``: string with get, set\n        abstract url: string with get, set\n        abstract referrer: string with get, set\n\n    and LoginAuthInfo =\n        abstract isProxy: bool with get, set\n        abstract scheme: string with get, set\n        abstract host: string with get, set\n        abstract port: float with get, set\n        abstract realm: string with get, set\n\n    and FindInPageOptions =\n        abstract forward: bool option with get, set\n        abstract findNext: bool option with get, set\n        abstract matchCase: bool option with get, set\n        abstract wordStart: bool option with get, set\n        abstract medialCapitalAsWordStart: bool option with get, set\n\n    and FoundInPageResult =\n        abstract requestId: float with get, set\n        abstract finalUpdate: bool with get, set\n        abstract activeMatchOrdinal: float option with get, set\n        abstract matches: float option with get, set\n        abstract selectionArea: Bounds option with get, set\n\n    and DeviceEmulationParameters =\n        abstract screenPosition: (* TODO: StringEnum *) string option with get, set\n        abstract screenSize: Dimension option with get, set\n        abstract viewPosition: Point option with get, set\n        abstract deviceScaleFactor: float with get, set\n        abstract viewSize: Dimension option with get, set\n        abstract fitToView: bool option with get, set\n        abstract offset: Point option with get, set\n        abstract scale: float with get, set\n\n    and SendInputEvent =\n        abstract ``type``: string with get, set\n        abstract modifiers: ResizeArray<string> with get, set\n\n    and SendInputKeyboardEvent =\n        inherit SendInputEvent\n        abstract keyCode: string with get, set\n\n    and SendInputMouseEvent =\n        inherit SendInputEvent\n        abstract x: float with get, set\n        abstract y: float with get, set\n        abstract button: (* TODO: StringEnum *) string option with get, set\n        abstract globalX: float option with get, set\n        abstract globalY: float option with get, set\n        abstract movementX: float option with get, set\n        abstract movementY: float option with get, set\n        abstract clickCount: float option with get, set\n\n    and SendInputMouseWheelEvent =\n        inherit SendInputEvent\n        abstract deltaX: float option with get, set\n        abstract deltaY: float option with get, set\n        abstract wheelTicksX: float option with get, set\n        abstract wheelTicksY: float option with get, set\n        abstract accelerationRatioX: float option with get, set\n        abstract accelerationRatioY: float option with get, set\n        abstract hasPreciseScrollingDeltas: float option with get, set\n        abstract canScroll: bool option with get, set\n\n    and Debugger =\n        inherit NodeJS.EventEmitter\n        abstract attach: ?protocolVersion: string -> unit\n        abstract isAttached: unit -> bool\n        abstract detach: unit -> unit\n        abstract sendCommand: ``method``: string * ?commandParams: obj * ?callback: Func<Error, obj, unit> -> unit\n        [<Emit(\"$0.on('detach',$1...)\")>] abstract on_detach: listener: Func<Event, string, unit> -> obj\n        [<Emit(\"$0.on('message',$1...)\")>] abstract on_message: listener: Func<Event, string, obj, unit> -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n\n    and WebFrame =\n        abstract setZoomFactor: factor: float -> unit\n        abstract getZoomFactor: unit -> float\n        abstract setZoomLevel: level: float -> unit\n        abstract getZoomLevel: unit -> float\n        abstract setZoomLevelLimits: minimumLevel: float * maximumLevel: float -> unit\n        abstract setSpellCheckProvider: language: string * autoCorrectWord: bool * provider: obj -> unit\n        abstract registerURLSchemeAsSecure: scheme: string -> unit\n        abstract registerURLSchemeAsBypassingCSP: scheme: string -> unit\n        abstract registerURLSchemeAsPrivileged: scheme: string -> unit\n        abstract insertText: text: string -> unit\n        abstract executeJavaScript: code: string * ?userGesture: bool * ?callback: Func<obj, unit> -> unit\n\n    and BrowserWindowProxy =\n        abstract closed: bool with get, set\n        abstract blur: unit -> unit\n        abstract close: unit -> unit\n        abstract eval: code: string -> unit\n        abstract focus: unit -> unit\n        abstract postMessage: message: string * targetOrigin: string -> unit\n\n    and CommonElectron =\n        abstract clipboard: Clipboard with get, set\n        abstract crashReporter: CrashReporter with get, set\n        abstract nativeImage: NativeImageStatic with get, set\n        abstract shell: Shell with get, set\n        abstract app: App with get, set\n        abstract autoUpdater: AutoUpdater with get, set\n        abstract BrowserWindow: BrowserWindowStatic with get, set\n        abstract contentTracing: ContentTracing with get, set\n        abstract dialog: Dialog with get, set\n        abstract ipcMain: IpcMain with get, set\n        abstract globalShortcut: GlobalShortcut with get, set\n        abstract Menu: MenuStatic with get, set\n        abstract MenuItem: MenuItemStatic with get, set\n        abstract powerMonitor: PowerMonitor with get, set\n        abstract powerSaveBlocker: PowerSaveBlocker with get, set\n        abstract protocol: Protocol with get, set\n        abstract screen: Screen with get, set\n        abstract session: SessionStatic with get, set\n        abstract Tray: Tray with get, set\n        abstract hideInternalModules: unit -> unit\n\n    and ElectronMainAndRenderer =\n        inherit CommonElectron\n        abstract desktopCapturer: DesktopCapturer with get, set\n        abstract ipcRenderer: IpcRenderer with get, set\n        abstract remote: Remote with get, set\n        abstract webFrame: WebFrame with get, set\n\n    module WebRequest =\n        type Filter =\n            abstract urls: ResizeArray<string> with get, set\n\n        and Details =\n            abstract id: float with get, set\n            abstract url: string with get, set\n            abstract ``method``: string with get, set\n            abstract resourceType: string with get, set\n            abstract timestamp: float with get, set\n\n        and UploadData =\n            abstract bytes: Buffer with get, set\n            abstract file: string with get, set\n\n        and BeforeRequestDetails =\n            inherit Details\n            abstract uploadData: ResizeArray<UploadData> option with get, set\n\n        and BeforeRequestCallback =\n            Func<obj, unit>\n\n        and BeforeSendHeadersDetails =\n            inherit Details\n            abstract requestHeaders: Headers with get, set\n\n        and BeforeSendHeadersCallback =\n            Func<obj, unit>\n\n        and SendHeadersDetails =\n            inherit Details\n            abstract requestHeaders: Headers with get, set\n\n        and HeadersReceivedDetails =\n            inherit Details\n            abstract statusLine: string with get, set\n            abstract statusCode: float with get, set\n            abstract responseHeaders: Headers with get, set\n\n        and HeadersReceivedCallback =\n            Func<obj, unit>\n\n        and ResponseStartedDetails =\n            inherit Details\n            abstract responseHeaders: Headers with get, set\n            abstract fromCache: bool with get, set\n            abstract statusCode: float with get, set\n            abstract statusLine: string with get, set\n\n        and BeforeRedirectDetails =\n            inherit Details\n            abstract redirectURL: string with get, set\n            abstract statusCode: float with get, set\n            abstract ip: string option with get, set\n            abstract fromCache: bool with get, set\n            abstract responseHeaders: Headers with get, set\n\n        and CompletedDetails =\n            inherit Details\n            abstract responseHeaders: Headers with get, set\n            abstract fromCache: bool with get, set\n            abstract statusCode: float with get, set\n            abstract statusLine: string with get, set\n\n        and ErrorOccurredDetails =\n            inherit Details\n            abstract fromCache: bool with get, set\n            abstract error: string with get, set\n\n    type IWebRequest =\n        abstract onBeforeRequest: listener: Func<WebRequest.BeforeRequestDetails, WebRequest.BeforeRequestCallback, unit> -> unit\n        abstract onBeforeRequest: filter: WebRequest.Filter * listener: Func<WebRequest.BeforeRequestDetails, WebRequest.BeforeRequestCallback, unit> -> unit\n        abstract onBeforeSendHeaders: listener: Func<WebRequest.BeforeSendHeadersDetails, WebRequest.BeforeSendHeadersCallback, unit> -> unit\n        abstract onBeforeSendHeaders: filter: WebRequest.Filter * listener: Func<WebRequest.BeforeSendHeadersDetails, WebRequest.BeforeSendHeadersCallback, unit> -> unit\n        abstract onSendHeaders: listener: Func<WebRequest.SendHeadersDetails, unit> -> unit\n        abstract onSendHeaders: filter: WebRequest.Filter * listener: Func<WebRequest.SendHeadersDetails, unit> -> unit\n        abstract onHeadersReceived: listener: Func<WebRequest.HeadersReceivedDetails, WebRequest.HeadersReceivedCallback, unit> -> unit\n        abstract onHeadersReceived: filter: WebRequest.Filter * listener: Func<WebRequest.HeadersReceivedDetails, WebRequest.HeadersReceivedCallback, unit> -> unit\n        abstract onResponseStarted: listener: Func<WebRequest.ResponseStartedDetails, unit> -> unit\n        abstract onResponseStarted: filter: WebRequest.Filter * listener: Func<WebRequest.ResponseStartedDetails, unit> -> unit\n        abstract onBeforeRedirect: listener: Func<WebRequest.BeforeRedirectDetails, unit> -> unit\n        abstract onBeforeRedirect: filter: WebRequest.Filter * listener: Func<WebRequest.BeforeRedirectDetails, unit> -> unit\n        abstract onCompleted: listener: Func<WebRequest.CompletedDetails, unit> -> unit\n        abstract onCompleted: filter: WebRequest.Filter * listener: Func<WebRequest.CompletedDetails, unit> -> unit\n        abstract onErrorOccurred: listener: Func<WebRequest.ErrorOccurredDetails, unit> -> unit\n        abstract onErrorOccurred: filter: WebRequest.Filter * listener: Func<WebRequest.ErrorOccurredDetails, unit> -> unit\n\n\n    module WebViewElement =\n        type Event =\n            ElectronPrivate.GlobalEvent\n\n        and LoadCommitEvent =\n            inherit Event\n            abstract url: string with get, set\n            abstract isMainFrame: bool with get, set\n\n        and DidFailLoadEvent =\n            inherit Event\n            abstract errorCode: float with get, set\n            abstract errorDescription: string with get, set\n            abstract validatedURL: string with get, set\n            abstract isMainFrame: bool with get, set\n\n        and DidFrameFinishLoadEvent =\n            inherit Event\n            abstract isMainFrame: bool with get, set\n\n        and DidGetResponseDetails =\n            inherit Event\n            abstract status: bool with get, set\n            abstract newURL: string with get, set\n            abstract originalURL: string with get, set\n            abstract httpResponseCode: float with get, set\n            abstract requestMethod: string with get, set\n            abstract referrer: string with get, set\n            abstract headers: Headers with get, set\n            abstract resourceType: string with get, set\n\n        and DidGetRedirectRequestEvent =\n            inherit Event\n            abstract oldURL: string with get, set\n            abstract newURL: string with get, set\n            abstract isMainFrame: bool with get, set\n            abstract httpResponseCode: float with get, set\n            abstract requestMethod: string with get, set\n            abstract referrer: string with get, set\n            abstract headers: Headers with get, set\n\n        and PageTitleUpdatedEvent =\n            inherit Event\n            abstract title: string with get, set\n            abstract explicitSet: string with get, set\n\n        and PageFaviconUpdatedEvent =\n            inherit Event\n            abstract favicons: ResizeArray<string> with get, set\n\n        and ConsoleMessageEvent =\n            inherit Event\n            abstract level: float with get, set\n            abstract message: string with get, set\n            abstract line: float with get, set\n            abstract sourceId: string with get, set\n\n        and FoundInPageEvent =\n            inherit Event\n            abstract result: FoundInPageResult with get, set\n\n        and NewWindowEvent =\n            inherit Event\n            abstract url: string with get, set\n            abstract frameName: string with get, set\n            abstract disposition: NewWindowDisposition with get, set\n            abstract options: BrowserWindowOptions with get, set\n\n        and NavigateEvent =\n            inherit Event\n            abstract url: string with get, set\n\n        and IpcMessageEvent =\n            inherit Event\n            abstract channel: string with get, set\n            abstract args: ResizeArray<obj> with get, set\n\n        and PluginCrashedEvent =\n            inherit Event\n            abstract name: string with get, set\n            abstract version: string with get, set\n\n        and DidChangeThemeColorEvent =\n            inherit Event\n            abstract themeColor: string with get, set\n\n    type IWebViewElement =\n        inherit HTMLElement\n        abstract src: string with get, set\n        abstract autosize: string with get, set\n        abstract nodeintegration: string with get, set\n        abstract plugins: string with get, set\n        abstract preload: string with get, set\n        abstract httpreferrer: string with get, set\n        abstract useragent: string with get, set\n        abstract disablewebsecurity: string with get, set\n        abstract partition: string with get, set\n        abstract allowpopups: string with get, set\n        abstract blinkfeatures: string with get, set\n        abstract loadURL: url: string * ?options: LoadURLOptions -> unit\n        abstract getURL: unit -> string\n        abstract getTitle: unit -> string\n        abstract isLoading: unit -> bool\n        abstract isWaitingForResponse: unit -> bool\n        abstract stop: unit -> unit\n        abstract reload: unit -> unit\n        abstract reloadIgnoringCache: unit -> unit\n        abstract canGoBack: unit -> bool\n        abstract canGoForward: unit -> bool\n        abstract canGoToOffset: offset: float -> bool\n        abstract clearHistory: unit -> unit\n        abstract goBack: unit -> unit\n        abstract goForward: unit -> unit\n        abstract goToIndex: index: float -> unit\n        abstract goToOffset: offset: bool -> unit\n        abstract isCrashed: unit -> bool\n        abstract setUserAgent: userAgent: string -> unit\n        abstract getUserAgent: unit -> string\n        abstract insertCSS: css: string -> unit\n        abstract executeJavaScript: code: string * ?userGesture: bool * ?callback: Func<obj, unit> -> unit\n        abstract openDevTools: unit -> unit\n        abstract closeDevTools: unit -> unit\n        abstract isDevToolsOpened: unit -> bool\n        abstract isDevToolsFocused: unit -> bool\n        abstract inspectElement: x: float * y: float -> unit\n        abstract inspectServiceWorker: unit -> unit\n        abstract setAudioMuted: muted: bool -> unit\n        abstract isAudioMuted: unit -> bool\n        abstract undo: unit -> unit\n        abstract redo: unit -> unit\n        abstract cut: unit -> unit\n        abstract copy: unit -> unit\n        abstract paste: unit -> unit\n        abstract pasteAndMatchStyle: unit -> unit\n        abstract delete: unit -> unit\n        abstract selectAll: unit -> unit\n        abstract unselect: unit -> unit\n        abstract replace: text: string -> unit\n        abstract replaceMisspelling: text: string -> unit\n        abstract insertText: text: string -> unit\n        abstract findInPage: text: string * ?options: FindInPageOptions -> float\n        abstract stopFindInPage: action: StopFindInPageAtion -> unit\n        abstract print: ?options: PrintOptions -> unit\n        abstract printToPDF: options: PrintToPDFOptions * callback: Func<Error, Buffer, unit> -> unit\n        abstract send: channel: string * [<ParamArray>] args: obj[] -> unit\n        abstract sendInputEvent: ``event``: SendInputEvent -> unit\n        abstract getWebContents: unit -> WebContents\n        [<Emit(\"$0.addEventListener('load-commit',$1...)\")>] abstract ``addEventListener_load-commit``: listener: Func<WebViewElement.LoadCommitEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-finish-load',$1...)\")>] abstract ``addEventListener_did-finish-load``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-fail-load',$1...)\")>] abstract ``addEventListener_did-fail-load``: listener: Func<WebViewElement.DidFailLoadEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-frame-finish-load',$1...)\")>] abstract ``addEventListener_did-frame-finish-load``: listener: Func<WebViewElement.DidFrameFinishLoadEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-start-loading',$1...)\")>] abstract ``addEventListener_did-start-loading``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-stop-loading',$1...)\")>] abstract ``addEventListener_did-stop-loading``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-get-response-details',$1...)\")>] abstract ``addEventListener_did-get-response-details``: listener: Func<WebViewElement.DidGetResponseDetails, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-get-redirect-request',$1...)\")>] abstract ``addEventListener_did-get-redirect-request``: listener: Func<WebViewElement.DidGetRedirectRequestEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('dom-ready',$1...)\")>] abstract ``addEventListener_dom-ready``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('page-title-updated',$1...)\")>] abstract ``addEventListener_page-title-updated``: listener: Func<WebViewElement.PageTitleUpdatedEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('page-favicon-updated',$1...)\")>] abstract ``addEventListener_page-favicon-updated``: listener: Func<WebViewElement.PageFaviconUpdatedEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('enter-html-full-screen',$1...)\")>] abstract ``addEventListener_enter-html-full-screen``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('leave-html-full-screen',$1...)\")>] abstract ``addEventListener_leave-html-full-screen``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('console-message',$1...)\")>] abstract ``addEventListener_console-message``: listener: Func<WebViewElement.ConsoleMessageEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('found-in-page',$1...)\")>] abstract ``addEventListener_found-in-page``: listener: Func<WebViewElement.FoundInPageEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('new-window',$1...)\")>] abstract ``addEventListener_new-window``: listener: Func<WebViewElement.NewWindowEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('will-navigate',$1...)\")>] abstract ``addEventListener_will-navigate``: listener: Func<WebViewElement.NavigateEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-navigate',$1...)\")>] abstract ``addEventListener_did-navigate``: listener: Func<WebViewElement.NavigateEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-navigate-in-page',$1...)\")>] abstract ``addEventListener_did-navigate-in-page``: listener: Func<WebViewElement.NavigateEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('close',$1...)\")>] abstract addEventListener_close: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('ipc-message',$1...)\")>] abstract ``addEventListener_ipc-message``: listener: Func<WebViewElement.IpcMessageEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('crashed',$1...)\")>] abstract addEventListener_crashed: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('gpu-crashed',$1...)\")>] abstract ``addEventListener_gpu-crashed``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('plugin-crashed',$1...)\")>] abstract ``addEventListener_plugin-crashed``: listener: Func<WebViewElement.PluginCrashedEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('destroyed',$1...)\")>] abstract addEventListener_destroyed: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('media-started-playing',$1...)\")>] abstract ``addEventListener_media-started-playing``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('media-paused',$1...)\")>] abstract ``addEventListener_media-paused``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('did-change-theme-color',$1...)\")>] abstract ``addEventListener_did-change-theme-color``: listener: Func<WebViewElement.DidChangeThemeColorEvent, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('devtools-opened',$1...)\")>] abstract ``addEventListener_devtools-opened``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('devtools-closed',$1...)\")>] abstract ``addEventListener_devtools-closed``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        [<Emit(\"$0.addEventListener('devtools-focused',$1...)\")>] abstract ``addEventListener_devtools-focused``: listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n        abstract addEventListener: ``type``: string * listener: Func<WebViewElement.Event, unit> * ?useCapture: bool -> unit\n\n\nmodule NodeJS =\n    type Process =\n        abstract ``type``: string with get, set\n        abstract resourcesPath: string with get, set\n        abstract mas: bool option with get, set\n        abstract windowsStore: bool option with get, set\n        abstract noAsar: bool option with get, set\n        [<Emit(\"$0.on('loaded',$1...)\")>] abstract on_loaded: listener: Function -> obj\n        abstract on: ``event``: string * listener: Function -> obj\n        abstract crash: unit -> unit\n        abstract hang: unit -> unit\n        abstract setFdLimit: maxDescriptors: float -> unit\n        \n[<AutoOpen>]\nmodule electron_Extensions =\n    let [<Import(\"default\",\"electron\")>] electron: Electron.ElectronMainAndRenderer = failwith \"JS only\"\n\n"]}