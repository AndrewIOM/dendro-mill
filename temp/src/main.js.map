{"version":3,"sources":["../../src/main.fsx"],"names":[],"mappings":";;;;AAYI,OACI;AAAU;AAAV;AAAA;AAGS;AAGF;AACc;AAPrB;AASJ,mBAAe,gBAAf;AASA,wBAII;AAAA;AAAyB,KAJ7B;AAlBI;AAAO;AA6Bf,yBAA+B;AAAA;AAAgB,CAA/C;AAGA,qCAGI;AAAA,QAAG,6BAAH,EACI;AAAA;AAAmB;AAAA,CAJ3B;AAOA,4BAGI;AAAA,QAAG;AAAA;AAAA,WAAH,EACI;AAAA;AAAkB;AAAA,CAJ1B","file":"main.js","sourcesContent":["#r \"../node_modules/fable-core/Fable.Core.dll\"\n#load \"../node_modules/fable-import-electron/Fable.Import.Electron.fs\"\n\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\nopen Fable.Import.Electron\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mutable mainWindow: BrowserWindow option = Option.None\n\nlet createMainWindow () =\n    let options = createEmpty<BrowserWindowOptions>\n    options.width <- Some 800.\n    options.height <- Some 600.\n    let window = electron.BrowserWindow.Create(options)\n\n    // Load the index.html of the app.\n    let opts = createEmpty<Node.url_types.UrlOptions>\n    opts.pathname <- Some <| Node.path.join(__SOURCE_DIRECTORY__,  \"../app/index.html\")\n    opts.protocol <- Some \"file:\"\n    window.loadURL(Node.url.format(opts))\n\n    #if DEBUG\n    fs.watch(Node.path.join(Node.__dirname, \"renderer.js\"), fun _ ->\n        window.webContents.reloadIgnoringCache() |> ignore\n    ) |> ignore\n    #endif\n\n    // Emitted when the window is closed.\n    window.on(\"closed\", unbox(fun () ->\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow <- Option.None\n    )) |> ignore\n\n    mainWindow <- Some window\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\nelectron.app.on(\"ready\", unbox createMainWindow)\n\n// Quit when all windows are closed.\nelectron.app.on(\"window-all-closed\", unbox(fun () ->\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if Node.``process``.platform <> \"darwin\" then\n        electron.app.quit()\n))\n\nelectron.app.on(\"activate\", unbox(fun () ->\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if mainWindow.IsNone then\n        createMainWindow()\n))"]}