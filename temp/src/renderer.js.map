{"version":3,"sources":["../../src/renderer.fsx"],"names":[],"mappings":";;;;;;;;;;;;;AAcmBAAc,yBAAd,EACc,yBADd,EAEwB,mCAFxB,EAGY,yBAHZ,EAIS,yBAJT,EAKS,yBALT;AAKkB;;;;AAelB,OACE;AAAA;AAAA,uBACa;AAAA;AAAC,KADd;AAAA;;AAGJ,8BAAM,EAAN,EACI,wBAAS;AAAA;AAAA;AAAA,UAAE,QAAQ,4BAAR,CAAF,EAAT,cADJ,EAEI,uBAAQ,EAAR,oBAFJ;AAHe;AAWd,kBADA,wBADA,+BADH,uBAAiB;AAAA;AAAA,CAAjB,EAAsB;AAAA;AAAA;AAAA;AAAA,CAAtB,EAA6B;AAAA;AAAA;AAAA;AAAA,CAA7B,CACG,CACA,CACA","file":"renderer.js","sourcesContent":["#r \"../node_modules/fable-core/Fable.Core.dll\"\n#r \"../node_modules/fable-react/Fable.React.dll\"\n#r \"../node_modules/fable-elmish/Fable.Elmish.dll\"\n#r \"../node_modules/fable-elmish-react/Fable.Elmish.React.dll\"\n\nopen Elmish\nopen Elmish.React\nopen Fable.Import\nopen Fable.Core.JsInterop\nopen Fable.React\n\nlet sass = importAll<obj> \"./sass/main.scss\"\n\n// Messages\ntype Message =\n  | Calibrate\n\n// Internal State\ntype Model = {\n    CartesianX: Motor\n    CartesianY: Motor\n    CartesianCalibration: Calibration\n    Rotation: Motor\n    TiltA: Motor\n    TiltB: Motor }\n\nand Motor = \n| Disabled\n| Enabled of MotorState\n\nand MotorState = {\n    MaxStep: int\n}\n\nand CartesianCoordinate = float * float\n\nand Calibration = \n| Uncalibrated\n| Calibrated of CalibrationState\n\nand CalibrationState = {\n    Image: string\n    TopRight: CartesianCoordinate\n    TopLeft: CartesianCoordinate\n    BottomRight: CartesianCoordinate\n    BottomLeft: CartesianCoordinate }\n\nlet init () =  \n    {CartesianX = Disabled\n     CartesianY = Disabled\n     CartesianCalibration = Uncalibrated\n     Rotation = Disabled\n     TiltA = Disabled\n     TiltB = Disabled}\n\n\nlet inline rand() = JS.Math.random()\nlet update (msg:Message) (model:Model)  =\n  match msg with\n  | Calibrate ->\n        model\n\n\n// View\nopen Fable.Core.JsInterop\nopen Fable.Helpers.React.Props\nmodule R = Fable.Helpers.React\n\nlet view count dispatch =\n  let onClick msg =\n    OnClick <| fun _ -> msg |> dispatch\n\n  R.div []\n    [ R.button [ onClick Calibrate ] [ R.str \"Calibrate\" ]\n      R.label [] [ R.str \"Hello Woodmill!\" ] ]\n\n// App\nProgram.mkSimple init update view\n|> Program.withConsoleTrace\n|> Program.withReact \"elmish-app\"\n|> Program.run"]}